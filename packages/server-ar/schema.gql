# -----------------------------------------------
# !!! THIS FILE WAS GENERATED BY TYPE-GRAPHQL !!!
# !!!   DO NOT MODIFY THIS FILE BY YOURSELF   !!!
# -----------------------------------------------

type ActorNote {
  id: String!
  owner: User!
  text: String!
  for: User!
  audition: Audition
  createdAt: String!
  updatedAt: Float!
}

type ActorTag {
  id: String!
  owner: User!
  tag: String!
  for: User!
  createdAt: String!
  updatedAt: Float!
}

input AddExperienceDTO {
  experienceType: String!
  experienceId: String
  experience: ExperienceInput
}

input AnswerToQuestions {
  questionId: String!
  text: String!
  userId: String!
}

type Audition {
  id: String!
  name: String!
  auditionType: String!
  requirementSummary: String
  lat: Float!
  long: Float!
  address: String!
  startDate: DateTime
  endDate: DateTime
  description: String
  private: Boolean
  prep: String
  open: Boolean
  project: Project!
  timeSlots: [AuditionTimeSlot!]!
  talent: [AuditionTalentInstance!]
  questions: [AuditionQuestion!]
  collateral: [AuditionCollateral!]
  forRoles: [ProjectRole!]
  createdAt: DateTime!
  updatedAt: DateTime!
  cloneAuditions: String!
}

type AuditionAnswers {
  id: String
  text: String
  question: AuditionQuestion!
  user: User!
}

type AuditionCollateral {
  id: String!
  s3Key: String!
  createdAt: String!
  audition: Audition!
  role: ProjectRole!
  user: User!
}

type AuditionQuestion {
  id: String!
  text: String!
  audition: Audition!
}

type AuditionTalentInstance {
  id: String!
  projectId: Float
  registered: Boolean
  selfSignup: String
  walkIn: String
  callBack: String
  hasConflicts: Boolean
  decision: String
  status: String!
  audition: Audition!
  timeSlot: AuditionTimeSlot
  responseCode: String!
  user: User
  createdAt: DateTime!
  updatedAt: DateTime!
  questions: [FormattedQuestionAnswer!]!
}

type AuditionTimeSlot {
  id: String!
  startTime: DateTime
  endTime: DateTime
  audition: Audition
  talent: [AuditionTalentInstance!]
  capacity: Float
}

type BreakdownAttribute {
  id: String!
  createdAt: String!
  type: Float!
  category: Float!
  value: String!
  user: User!
  projectRole: ProjectRole!
}

type CommercialExperience implements Experience {
  id: String
  role: String!
  project: String!
  company: String!
  director: String!
  index: Float
  imageGuid: String
  description: String
  showOnResume: Boolean
  user: User!
}

input CreateAuditionDTO {
  name: String!
  auditionType: String!
  requirementSummary: String
  lat: Float!
  long: Float!
  address: String!
  startDate: DateTime!
  description: String!
  private: Boolean!
  prep: String
  forRoles: [String!]!
  questions: [String!]!
  cloneAuditions: [String!]!
}

input CreateNoteDTO {
  owner: String
  text: String!
  for: String!
  audition: String!
}

input CreateProjectDTO {
  name: String!
  writer: String!
  director: String!
  notes: String!
  performanceDateEnd: DateTime!
  performanceDateStart: DateTime!
  rehearsalDateEnd: DateTime!
  rehearsalDateStart: DateTime!
  shortName: String!
  summary: String!
  organizationId: String!
}

input CreateTagDTO {
  tag: String!
  for: String!
}

input CreateTimeSlotDTO {
  startTime: DateTime!
  endTime: DateTime!
  auditionId: String
  capacity: Int
}

"""
The javascript `Date` as string. Type represents date and time as the ISO Date string.
"""
scalar DateTime

input DeleteTimeSlotDTO {
  id: String!
  auditionId: String
}

interface Experience {
  id: String
  role: String!
  project: String!
  company: String!
  director: String!
  index: Float
  imageGuid: String
  description: String
  showOnResume: Boolean
}

input ExperienceInput {
  id: String
  role: String!
  project: String!
  company: String!
  director: String!
  index: Float
  imageGuid: String
  description: String
  showOnResume: Boolean
}

input ExperienceOrder {
  id: String!
  index: Float!
}

"""Experience Order"""
enum ExperienceType {
  theatreExperience
  musicalTheatreExperience
  operaExperience
  filmExperience
  televisionExperience
  commercialExperience
}

"""Eye Color"""
enum EyeColor {
  brown
  hazel
  blue
  green
  gray
  amber
  other
  unknown
}

type FilmExperience implements Experience {
  id: String
  role: String!
  project: String!
  company: String!
  director: String!
  index: Float
  imageGuid: String
  description: String
  showOnResume: Boolean
  user: User!
}

type FormattedAnswer {
  id: String!
  text: String!
}

type FormattedBreakdown {
  ageRange: [String!]
  gender: [String!]
  unions: [String!]
  ethnicity: [String!]
  vocalRange: [String!]
}

type FormattedCollateral {
  url: String
  key: String
}

type FormattedQuestionAnswer {
  id: String!
  text: String!
  answer: FormattedAnswer
}

"""Hair Color"""
enum HairColor {
  black
  brown
  red
  blonde
  gray
  white
  other
  unknown
}

type LoginResponse {
  accessToken: String!
  userId: String!
  displayName: String
}

type MusicalTheatreExperience implements Experience {
  id: String
  role: String!
  project: String!
  company: String!
  director: String!
  index: Float
  imageGuid: String
  description: String
  showOnResume: Boolean
  user: User!
}

type Mutation {
  updateUser(data: UserDataDTO!): Boolean
  addExperience(data: AddExperienceDTO!): Boolean
  reorderExperience(data: ReorderExperienceDTO!): Boolean
  removeExperience(data: AddExperienceDTO!): Boolean
  setProfile(key: String!): Boolean
  deleteImage(key: String!): Boolean
  changeExperienceOrder(newExperiences: [ExperienceType!], order: [String!]): Boolean
  moveSection(newExperiences: [ExperienceType!], order: [String!]): Boolean
  addSkillOrTraining(type: String!, text: String, skillOrder: [ExperienceOrder!]): Boolean
  removeSkillOrTraining(type: String!, text: String, skillOrder: [ExperienceOrder!]): Boolean
  reorderSkillOrTraining(type: String!, text: String, skillOrder: [ExperienceOrder!]): Boolean
  addUserBreakdown(key: String!): Boolean
  createProject(data: CreateProjectDTO!): Project!
  deleteProject(projectId: String!): Boolean!
  sendRejectionEmails(projectId: String!): Boolean
  deleteTimeSlot(data: DeleteTimeSlotDTO!): Boolean!
  removeTalentFromTimeSlot(data: DeleteTimeSlotDTO!): Boolean!
  createTimeslot(data: CreateTimeSlotDTO!): AuditionTimeSlot!
  createAudition(projectId: String!, audition: CreateAuditionDTO!): Audition!
  respondToAuditionInvite(email: String!, responseCode: String!, response: String!, answerToQuestions: [String!]!): Audition!
  closeAudition(auditionId: String!): Audition!
  deleteAudition(auditionId: String!): Audition!
  checkIn(status: String, instanceId: String): Boolean
  updateTalentInstance(decision: String, instanceId: String): Boolean
  inviteToAudition(auditionId: String!, userId: String, users: [String!], timeSlotId: String, projectId: String!): AuditionTalentInstance!
  updateAnswer(text: String!, answerId: String!): Boolean!
  addNote(input: CreateNoteDTO!): ActorNote!
  removeNote(id: String!): Boolean
  login(email: String!, password: String!): LoginResponse!
  createTag(input: CreateTagDTO!): Boolean
  deleteTag(input: CreateTagDTO!): Boolean
}

type OperaExperience implements Experience {
  id: String
  role: String!
  project: String!
  company: String!
  director: String!
  index: Float
  imageGuid: String
  description: String
  showOnResume: Boolean
  user: User!
}

type Organization {
  id: String!
  name: String!
  lat: Float!
  long: Float!
  address: String!
  contactPhoneNumber: String!
  irsStatus: String!
  website: String!
  contractsOfferred: String!
  aboutUs: String!
  ein: String!
  projects: [Project!]!
  members: [User!]!
  owner: User!
}

type Project {
  id: String!
  name: String!
  status: String
  writer: String!
  director: String!
  summary: String
  notes: String
  photoS3Key: String
  rehearsalDateStart: String
  rehearsalDateEnd: String
  performanceDateStart: String
  performanceDateEnd: String
  createdAt: DateTime!
  updatedAt: DateTime!
  roles: [ProjectRole!]!
  auditions: [Audition!]!
  rejected: [ProjectRejectedUser!]
  organization: Organization!
}

type ProjectRejectedUser {
  rejectionEmailSent: Boolean
  user: User
  project: Project
}

type ProjectRole {
  id: String!
  project: Project!
  characterName: String!
  characterSummary: String!
  movementRequirements: String
  castTo: User
  breakdown: FormattedBreakdown
  inAuditions: [Audition!]!
  collateral: [FormattedCollateral!]!
}

type Query {
  getUser(id: String!): User!
  getActor(id: String!): User!
  getInstances(id: String!): User!
  getNotifications(id: String!): User!
  getExperience(data: ReorderExperienceDTO!): [TheatreExperience!]
  getAllOrganizationsForUser: UserOrganizations!
  getOneOrganization(organizationId: String!): Organization!
  getAllProjects(organizationId: String!): [Project!]!
  getOneProject(projectId: String!): Project!
  getAllRoles(projectId: String!): [ProjectRole!]!
  getRole(roleId: String!): ProjectRole!
  getAuditionsForProject(projectId: String!): [Audition!]!
  getAudition(auditionId: String!): Audition!
  getAuditionForRSVP(auditionId: String!): Audition!
  searchForAuditions(query: String!): [Audition!]!
  getInstance(instanceId: String!): AuditionTalentInstance!
  getAllNotes: [ActorNote!]!
  getNotes(actorId: String!): [ActorNote!]!
  tokenCheck: User!
  getDistinctTags: Tags!
  getTagsForOwner: [ActorTag!]!
  getTagsForTagsPage: [ActorTag!]!
  getTagsForActor(id: String!): Tags!
}

input ReorderExperienceDTO {
  experienceType: String!
  experienceOrder: [ExperienceOrder!]
  userId: String
}

type SpecialSkill {
  id: String
  text: String!
  user: User
  index: Float
}

type Tags {
  tags: [String!]
}

type TelevisionExperience implements Experience {
  id: String
  role: String!
  project: String!
  company: String!
  director: String!
  index: Float
  imageGuid: String
  description: String
  showOnResume: Boolean
  user: User!
}

type TheatreExperience implements Experience {
  id: String
  role: String!
  project: String!
  company: String!
  director: String!
  index: Float
  imageGuid: String
  description: String
  showOnResume: Boolean
  user: User!
}

type Training {
  id: String
  text: String!
  user: User
  index: Float
}

type User {
  id: String!
  theatreVerified: Boolean!
  verified: Boolean!
  emailConfirmed: Boolean!
  email: String!
  firstName: String!
  lastName: String!
  displayName: String
  representation: String
  city: String
  state: String
  ghostAccount: Boolean
  website: String
  gender: String
  phoneNumber: String
  heightInches: Float
  eyeColor: EyeColor!
  hairColor: HairColor!
  weightLbs: Float
  organizations: [Organization!]!
  ownedOrgs: [Organization!]!
  specialSkills: [SpecialSkill!]
  trainings: [Training!]
  instances: [AuditionTalentInstance!]!
  theatreExperience: [TheatreExperience!]!
  musicalTheatreExperience: [MusicalTheatreExperience!]!
  operaExperience: [OperaExperience!]!
  filmExperience: [FilmExperience!]!
  televisionExperience: [TelevisionExperience!]!
  commercialExperience: [CommercialExperience!]!
  profileImages: [UserImage!]!
  breakdown: FormattedBreakdown!
  userType: [UserType!]!
  experienceOrder: [ExperienceType!]!
  profileOrder: [String!]!
  rejections: [ProjectRejectedUser!]
  castIn: [ProjectRole!]!
  notes: [ActorNote!]!
  createdAt: String!
  updatedAt: Float!
  profilePicture: UserImage
}

input UserDataDTO {
  firstName: String
  lastName: String
  city: String
  state: String
  website: String
  representation: String
  gender: String
  phoneNumber: String
  heightInches: Float
  eyeColor: String
  hairColor: String
}

type UserImage {
  id: String!
  isPrimary: Boolean!
  s3Key: String!
  createdAt: String!
  url: String
  user: User!
}

type UserOrganizations {
  owned: [Organization!]!
  member: [Organization!]!
}

"""What type of user is this? Admin or Actor"""
enum UserType {
  admin
  actor
  theatre
}
